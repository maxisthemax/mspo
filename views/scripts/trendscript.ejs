<script src="amcharts4/core.js"></script>
<script src="amcharts4/charts.js"></script>
<script src="amcharts4/themes/animated.js"></script>

<script> 
var chart;
var valueAxis;
var dateAxis;
var series = [];
var tagkeys = [];

var xlinerange;
var xseriesrange;
$(function(){

    var results = <%- JSON.stringify(datas) %>;

    $('#downloadTrendPDF').hide();
    $('#savedownloadTrendPDF').hide();
    /**
    * ---------------------------------------
    * This demo was created using amCharts 4.
    * 
    * For more information visit:
    * https://www.amcharts.com/
    * 
    * Documentation is available at:
    * https://www.amcharts.com/docs/v4/
    * ---------------------------------------
    */

    // Themes begin
    //am4core.useTheme(am4themes_animated);
    // Themes end

    // Create chart instance
    chart = am4core.create("chartdiv", am4charts.XYChart);
    chart.preloader.disabled = true;
    var title = chart.titles.create();
    title.text = "TREND";
    title.fontSize = 25;
    title.marginBottom = 30;

    chart.dataDateFormat = "yyyy-MM-dd hh-mm-ss";
    if (results) {

      for (var key in results[0]) {
        if (key != "DateAndTime") {
          tagkeys.push(key);
        }
      }
    }

    chart.data = generateChartData(results);

   
    // Set input format for the dates
    chart.dateFormatter.inputDateFormat = "yyyy-MM-dd hh-mm-ss";
    //chart.paddingRight = 20;  
    // Create axes
    dateAxis = chart.xAxes.push(new am4charts.DateAxis());
    // dateAxis.baseInterval = {
    //   "timeUnit": "second",
    //   "count": 1
    // } 
    dateAxis.title.text = "Date & Time";
    //dateAxis.renderer.grid.template.location = 0;
    dateAxis.renderer.minGridDistance = 30;
    dateAxis.dateFormats.setKey("second", "ss");
    
    dateAxis.periodChangeDateFormats.setKey("hour", "[bold]MMM dd hh:mm");
    dateAxis.renderer.labels.template.location = 0.0001;
    dateAxis.startLocation = 0;
    dateAxis.endLocation = 1;
    
    dateAxis.renderer.axisFills.template.disabled = true;
    dateAxis.renderer.ticks.template.disabled = true;
    dateAxis.renderer.labels.template.rotation = 90;
    dateAxis.renderer.labels.template.verticalCenter = "middle";
    dateAxis.renderer.labels.template.horizontalCenter = "left";

    dateAxis.tooltipDateFormat = "yyyy-MM-dd hh:mm:ss";
    dateAxis.adapter.add("getTooltipText", (text) => {
      return ">>> " + text + " <<<";
    });

    valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
    valueAxis.title.text="Value";
    valueAxis.tooltip.disabled = true;
    valueAxis.renderer.minWidth = 35;
    valueAxis.renderer.axisFills.template.disabled = true;
    valueAxis.renderer.ticks.template.disabled = true;

    for (var i = 0; i < tagkeys.length; i++) {  
      console.log(tagkeys[i]);
      createAxisAndSeries(tagkeys[i], tagkeys[i], false, "circle",i);
    }
    console.log(series);
    // createAxisAndSeries("visits", "Visits", false, "circle");
    // createAxisAndSeries("views", "Views", true, "triangle");
    // createAxisAndSeries("hits", "Hits", true, "rectangle");

    // Add legend
    chart.legend = new am4charts.Legend();
    // Add cursor
    chart.cursor = new am4charts.XYCursor();

    // Create vertical scrollbar and place it before the value axis
    chart.scrollbarY = new am4core.Scrollbar();
    chart.scrollbarY.parent = chart.leftAxesContainer;
    chart.scrollbarY.toBack();

    // Create a horizontal scrollbar with previe and place it underneath the date axis
    chart.scrollbarX = new am4charts.XYChartScrollbar();

    chart.scrollbarX.parent = chart.bottomAxesContainer;

    chart.events.on("ready", function () {
      //dateAxis.zoom({start:0.79, end:1});
      $('#downloadTrendPDF').show();
      $('#savedownloadTrendPDF').show();
      // drawXline(xline,0);
      // fillXseries(xline,0);     
    });  
});  

function generateChartData(results) {
  //var chartData = [];



  for (var i = 0; i < results.length; i++) {
      var offset = new Date().getTimezoneOffset()*60*1000;
      var newDate = new Date(Date.parse(results[i].DateAndTime) + offset);
      
      for (var j = 0; j < tagkeys.length; j++) {

        console.log(results[i][tagkeys[0]]);
        if (results[i][tagkeys[0]] > results[i][tagkeys[1]])
          results[i]['alertcolor']=chart.colors.getIndex(5);
        else if (results[i][tagkeys[0]] < results[i][tagkeys[2]])
          results[i]['alertcolor']=chart.colors.getIndex(10);
        else
          results[i]['alertcolor']=chart.colors.getIndex(1);;
      }
      results[i].DateAndTime = newDate;

  }
  console.log(results);
  return results;
}

function createAxisAndSeries(field, name, opposite, bullet,index) {
  //var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
  
  series[index] = chart.series.push(new am4charts.LineSeries());
  
  series[index].dataFields.valueY = field;
  series[index].dataFields.dateX = "DateAndTime";
  series[index].strokeWidth = 2;
  series[index].yAxis = valueAxis;
  series[index].name = name;
  series[index].tooltipText = "{name}: [bold]{valueY}[/]";
  //series[index].tensionX = 0.8;
  series[index].minBulletDistance = 10;

  var interfaceColors = new am4core.InterfaceColorSet();
  
  switch(bullet) {
    case "triangle":
      var bullet = series[index].bullets.push(new am4charts.Bullet());
      bullet.width = 12;
      bullet.height = 12;
      bullet.horizontalCenter = "middle";
      bullet.verticalCenter = "middle";
      
      var triangle = bullet.createChild(am4core.Triangle);
      triangle.stroke = interfaceColors.getFor("background");
      triangle.strokeWidth = 2;
      triangle.direction = "top";
      triangle.width = 12;
      triangle.height = 12;
      triangle.propertyFields.stroke = "alertcolor";
      break;
    case "rectangle":
      var bullet = series[index].bullets.push(new am4charts.Bullet());
      bullet.width = 10;
      bullet.height = 10;
      bullet.horizontalCenter = "middle";
      bullet.verticalCenter = "middle";

      var rectangle = bullet.createChild(am4core.Rectangle);
      rectangle.stroke = interfaceColors.getFor("background");
      rectangle.strokeWidth = 2;
      rectangle.width = 10;
      rectangle.height = 10;

      break;
    default:
      var bullet = series[index].bullets.push(new am4charts.CircleBullet());
      bullet.circle.stroke = interfaceColors.getFor("background");
      bullet.circle.strokeWidth = 2;
      // if (index == 0){
      //   bullet.circle.propertyFields.stroke = "alertcolor";
      //   bullet.circle.propertyFields.fill = "alertcolor";
      // }  
      break;
  }
  if (index == 0){
    //series[index].fillOpacity = 0.7;
    //series[index].propertyFields.fill = "color";
    //series[index].propertyFields.stroke = "alertcolor";
  }  
    // valueAxis.renderer.line.strokeOpacity = 1;
    // valueAxis.renderer.line.strokeWidth = 2;
    // valueAxis.renderer.line.stroke = series.stroke;
    // valueAxis.renderer.labels.template.fill = series.stroke;
    // valueAxis.renderer.opposite = opposite;
    // valueAxis.renderer.grid.template.disabled = true;
}


















































function drawXline(xLine,remove) {
  //valueAxis = chart.yAxes.values[0];
  //series = chart.series.values[0];
  if (remove == 0)
  {
    valueAxis.axisRanges.removeValue(xlinerange);
  }
  else if (xLine!='')
  {
    xlinerange = valueAxis.axisRanges.create();
    xlinerange.value = xLine;
    xlinerange.grid.stroke = 'purple';
    xlinerange.grid.strokeWidth = 2;
    xlinerange.grid.strokeOpacity = 1;
  }
}

function fillXseries(xLine,remove) {
  //valueAxis = chart.yAxes.values[0];
  //series = chart.series.values[0];
  if (remove == 0)
  {
    xseriesrange.contents.stroke = 'blue';
    xseriesrange.contents.fillOpacity = 0
    series.fillOpacity = 0; 
    series.validateData();
  }
  else if (xLine!='')
  {
    series.fillOpacity = 0.2; 
    xseriesrange = valueAxis.createSeriesRange(series);
    xseriesrange.value = xLine;
    xseriesrange.startValue = xLine;
    xseriesrange.endValue = valueAxis.max;
    xseriesrange.contents.stroke = 'red';
    xseriesrange.contents.fill = xseriesrange.contents.stroke;
    xseriesrange.contents.fillOpacity = 0.2;
    series.validateData();
  }
}

function downloadPDF() {
  
  Promise.all([
    chart.exporting.pdfmake,
    chart.exporting.getImage("png")
  ]).then(function(res) { 
    
    var pdfMake = res[0];
    
    // pdfmake is ready
    // Create document template
    var doc = {
      pageSize: "A4",
      pageOrientation: "portrait",
      pageMargins: [30, 30, 30, 30],
      content: []
    };
    
    doc.content.push({
      text: "TREND REPORT",
      fontSize: 20,
      bold: true,
      margin: [0, 20, 0, 15]
    });

    doc.content.push({
      image: res[1],
      width: 530
    });
    

    pdfMake.createPdf(doc).download("report.pdf");
    
  });
}


/*
function makeline2(results) 
{
  // Create chart instance
  var chart = am4core.create("chartdiv", am4charts.XYChart);

  // Add data
  chart.data = generateChartData();

  // Create axes
  var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
  dateAxis.renderer.minGridDistance = 50;

  var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

  // Create series
  var series = chart.series.push(new am4charts.LineSeries());
  series.dataFields.valueY = "value";
  series.dataFields.dateX = "date";
  series.strokeWidth = 2;
  series.minBulletDistance = 10;
  series.tooltipText = "{valueY}";
  series.tooltip.pointerOrientation = "vertical";
  series.tooltip.background.cornerRadius = 20;
  series.tooltip.background.fillOpacity = 0.5;
  series.tooltip.label.padding(12,12,12,12)

  // Add scrollbar
  chart.scrollbarX = new am4charts.XYChartScrollbar();
  chart.scrollbarX.series.push(series);

  // Add cursor
  chart.cursor = new am4charts.XYCursor();
  chart.cursor.xAxis = dateAxis;
  chart.cursor.snapToSeries = series;

  function generateChartData() {
      var chartData = [];

      for (var i = 0; i < results.length; i++){
          var newDate = new Date(results[i].DateAndTime);
          var value = results[i].Val;
          chartData.push({
              date: newDate,
              value: value
          });
      }
      return chartData;
  }
}
*/
</script>
